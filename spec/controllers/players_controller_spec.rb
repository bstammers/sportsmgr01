require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe PlayersController do

  # This should return the minimal set of attributes required to create a valid
  # Player. As you add validations to Player, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { "firstname" => "MyString" } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # PlayersController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  let(:player1) {FactoryGirl.create(:player)}

=begin
  describe "GET index" do
    it "assigns all players as @players" do
      player = Player.create! valid_attributes
      get :index, {}, valid_session
      assigns(:players).should eq([player])
    end
  end
=end

  describe "GET show" do
    it "assigns the requested player as @player" do
      #player = Player.create! valid_attributes
      #player = FactoryGirl.create(:player)
      get :show, id: player1
      assigns(:player).should eq(player1)
    end
  end

  describe "GET new" do
    it "assigns a new player as @player" do
      get :new
      assigns(:player).should be_a_new(Player)
    end
  end

  describe "GET edit" do
    it "assigns the requested player as @player" do
      #player = FactoryGirl.build(:player)
      get :edit, id: player1
      assigns(:player).should eq(player1)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Player" do
        expect {
          post :create, player: FactoryGirl.attributes_for(:player)
        }.to change(Player, :count).by(1)
      end

      it "assigns a newly created player as @player" do
        post :create, player: FactoryGirl.attributes_for(:player)
        assigns(:player).should be_a(Player)
        assigns(:player).should be_persisted
      end

      it "redirects to the created player" do
        post :create, player: FactoryGirl.attributes_for(:player)
        response.should redirect_to(Player.last)
      end
    end

    describe "with invalid params" do
      it "does not save the new player" do
        expect {
          post :create, player: FactoryGirl.attributes_for(:invalid_player)
        }.to_not change(Player, :count)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        #Player.any_instance.stub(:save).and_return(false)
        post :create, player: FactoryGirl.attributes_for(:invalid_player)
        response.should render_template("new")
      end
    end
  end


  describe "PUT update" do
    describe "with valid params" do
      before :each do
        @player = FactoryGirl.create(:player)
      end
      it "updates the requested player" do
        put :update, id: @player, player: FactoryGirl.attributes_for(:player, firstname: "Tom", lastname: "Brown")
        @player.reload
        @player.firstname.should eq("Tom")
        @player.lastname.should eq("Brown")
      end

      it "assigns the requested player as @player" do
        #player = Player.create! valid_attributes
        put :update, id: @player, player: FactoryGirl.attributes_for(:player)
        assigns(:player).should eq(@player)
      end

      it "redirects to the player" do
       put :update, id: @player, player: FactoryGirl.attributes_for(:player)
        response.should redirect_to(@player)
      end
    end

=begin
    describe "with invalid params" do
      it "does not update the requested player" do
        put :update, id: @player, player: FactoryGirl.attributes_for(:player, firstname: nil, lastname: "Brown")
        @player.reload
        @player.firstname.should_not eq("Tom")
        @player.lastname.should eq("Smith")
      end
      it "assigns the player as @player" do
        put :update, id: @player, player: FactoryGirl.attributes_for(:invalid_player)
        assigns(:player).should eq(@player)
      end

      it "re-renders the 'edit' template" do
        put :update, id: @player, player: FactoryGirl.attributes_for(:invalid_player)
        response.should render_template("edit")
      end
    end
=end
  end

  describe "DELETE destroy" do
    it "destroys the requested player" do
      expect {
        delete :destroy, id: player1
      }.to change(Player, :count).by(-1)
    end

    it "redirects to the players list" do
      delete :destroy, id: player1
      response.should redirect_to(players_url)
    end
  end


end
